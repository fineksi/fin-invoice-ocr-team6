name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build Node.js App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Build Application
        working-directory: backend
        run: npm run build
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: backend/dist/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Run Linter
        working-directory: backend
        run: npm run lint

      - name: Run Tests
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}

  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Docker Login
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io

      - name: Set Docker BuildKit
        run: export DOCKER_BUILDKIT=1

      - name: Build Docker Image
        run: |
          docker build --build-arg NODE_ENV='${{ secrets.NODE_ENV }}' \
          --build-arg DATABASE_URL='${{ secrets.DATABASE_URL }}' \
          --build-arg API_KEY='${{ secrets.API_KEY }}' \
          -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} backend

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH Key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem

      - name: Update SSH Key Permission
        run: chmod 400 ssh-key.pem

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} "
            sudo docker container rm -f ${{ secrets.CONTAINER_NAME }} || true &&
            sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} || true &&
            sudo docker pull ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} &&
            sudo docker run --name ${{ secrets.CONTAINER_NAME }} -d -p 8080:3000 ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}"
